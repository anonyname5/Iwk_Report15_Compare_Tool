<?php

namespace App\Services;

use App\Models\ExcelJson;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;

class ExcelExportService
{
    /**
     * Export comparison data to an Excel file
     *
     * @param array $comparisonData The comparison data
     * @param ExcelJson $file1 The first file
     * @param ExcelJson $file2 The second file
     * @return string Path to the generated Excel file
     */
    public function exportComparison(array $comparisonData, ExcelJson $file1, ExcelJson $file2)
    {
        // Create new Spreadsheet
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();
        $sheet->setTitle('Comparison Results');
        
        // Set headers and initial formatting
        $this->setupHeaders($sheet, $comparisonData, $file1, $file2);
        
        // Add summary data
        $this->addSummarySection($sheet, $comparisonData);
        
        // Add detailed comparison data - start 2 rows lower to account for the extra summary rows
        $rowIndex = $this->addDetailedComparison($sheet, $comparisonData, 22);
        
        // Apply global formatting
        $this->applyGlobalFormatting($sheet, $rowIndex);
        
        // Create the Excel file
        $filename = $comparisonData['comparison_name'] . '_' . date('Y-m-d') . '.xlsx';
        $filepath = storage_path('app/public/exports/' . $filename);
        
        // Ensure the directory exists
        if (!file_exists(dirname($filepath))) {
            mkdir(dirname($filepath), 0755, true);
        }
        
        $writer = new Xlsx($spreadsheet);
        $writer->save($filepath);
        
        return $filepath;
    }
    
    /**
     * Setup headers and title section
     */
    private function setupHeaders($sheet, $comparisonData, $file1, $file2)
    {
        // Title
        $sheet->setCellValue('A1', 'IWK Finance Comparison Report');
        $sheet->mergeCells('A1:P1');
        $sheet->getStyle('A1')->getFont()->setBold(true)->setSize(16);
        $sheet->getStyle('A1')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        
        // Comparison name
        $sheet->setCellValue('A2', 'Comparison Name: ' . $comparisonData['comparison_name']);
        $sheet->mergeCells('A2:P2');
        $sheet->getStyle('A2')->getFont()->setBold(true)->setSize(12);
        
        // Generated date
        $sheet->setCellValue('A3', 'Generated on: ' . Carbon::now()->format('Y-m-d H:i:s'));
        $sheet->mergeCells('A3:P3');
        
        // File information
        $sheet->setCellValue('A5', 'File 1:');
        $sheet->setCellValue('B5', $file1->file_name);
        $sheet->setCellValue('A6', 'Uploaded:');
        $sheet->setCellValue('B6', $file1->created_at->format('Y-m-d H:i:s'));
        
        $sheet->setCellValue('I5', 'File 2:');
        $sheet->setCellValue('J5', $file2->file_name);
        $sheet->setCellValue('I6', 'Uploaded:');
        $sheet->setCellValue('J6', $file2->created_at->format('Y-m-d H:i:s'));
        
        // Styling
        $sheet->getStyle('A5:A6')->getFont()->setBold(true);
        $sheet->getStyle('I5:I6')->getFont()->setBold(true);
    }
    
    /**
     * Add summary section to the spreadsheet
     */
    private function addSummarySection($sheet, $comparisonData)
    {
        $sheet->setCellValue('A8', 'Summary');
        $sheet->mergeCells('A8:P8');
        $sheet->getStyle('A8')->getFont()->setBold(true)->setSize(14);
        
        // Summary data
        $sheet->setCellValue('A10', 'Total Cost Centers:');
        $sheet->setCellValue('C10', $comparisonData['summary']['total_cost_centers']);
        
        $sheet->setCellValue('A11', 'Matched Cost Centers:');
        $sheet->setCellValue('C11', $comparisonData['summary']['matched_cost_centers']);
        
        $sheet->setCellValue('A12', 'With Differences:');
        $sheet->setCellValue('C12', $comparisonData['summary']['with_differences']);
        
        $sheet->setCellValue('A13', 'Overall Totals with Differences:');
        $sheet->setCellValue('C13', $comparisonData['summary']['overall_with_differences']);
        
        $sheet->setCellValue('I10', 'Only in File 1:');
        $sheet->setCellValue('K10', $comparisonData['summary']['only_in_file1']);
        
        $sheet->setCellValue('I11', 'Only in File 2:');
        $sheet->setCellValue('K11', $comparisonData['summary']['only_in_file2']);
        
        // Report Totals status
        $sheet->setCellValue('I12', 'Report Totals:');
        if ($comparisonData['report_totals']['exists_in_file1'] && $comparisonData['report_totals']['exists_in_file2']) {
            if ($comparisonData['report_totals']['has_differences']) {
                $sheet->setCellValue('K12', 'Has differences');
                $sheet->getStyle('K12')->getFont()->getColor()->setRGB('E74C3C'); // Red
            } else {
                $sheet->setCellValue('K12', 'Matched');
                $sheet->getStyle('K12')->getFont()->getColor()->setRGB('27AE60'); // Green
            }
        } else if ($comparisonData['report_totals']['exists_in_file1']) {
            $sheet->setCellValue('K12', 'Only in File 1');
        } else if ($comparisonData['report_totals']['exists_in_file2']) {
            $sheet->setCellValue('K12', 'Only in File 2');
        } else {
            $sheet->setCellValue('K12', 'Not found');
        }
        
        // Age Balance status
        $sheet->setCellValue('I13', 'Age Balance %:');
        if ($comparisonData['age_balance']['exists_in_file1'] && $comparisonData['age_balance']['exists_in_file2']) {
            if ($comparisonData['age_balance']['has_differences']) {
                $sheet->setCellValue('K13', 'Has differences');
                $sheet->getStyle('K13')->getFont()->getColor()->setRGB('E74C3C'); // Red
            } else {
                $sheet->setCellValue('K13', 'Matched');
                $sheet->getStyle('K13')->getFont()->getColor()->setRGB('27AE60'); // Green
            }
        } else if ($comparisonData['age_balance']['exists_in_file1']) {
            $sheet->setCellValue('K13', 'Only in File 1');
        } else if ($comparisonData['age_balance']['exists_in_file2']) {
            $sheet->setCellValue('K13', 'Only in File 2');
        } else {
            $sheet->setCellValue('K13', 'Not found');
        }
        
        // Styling
        $sheet->getStyle('A10:A13')->getFont()->setBold(true);
        $sheet->getStyle('I10:I13')->getFont()->setBold(true);
        
        // Add a legend
        $sheet->setCellValue('A15', 'Legend:');
        $sheet->getStyle('A15')->getFont()->setBold(true);
        
        $sheet->setCellValue('A16', 'Positive change:');
        $sheet->setCellValue('C16', 'Value in File 2 is higher than File 1');
        $sheet->getStyle('C16')->getFont()->getColor()->setRGB('27AE60');
        
        $sheet->setCellValue('A17', 'Negative change:');
        $sheet->setCellValue('C17', 'Value in File 2 is lower than File 1');
        $sheet->getStyle('C17')->getFont()->getColor()->setRGB('E74C3C');
        
        $sheet->setCellValue('I16', 'Missing in File 1:');
        $sheet->setCellValue('K16', 'Cost center exists only in File 2');
        
        $sheet->setCellValue('I17', 'Missing in File 2:');
        $sheet->setCellValue('K17', 'Cost center exists only in File 1');
    }
    
    /**
     * Add detailed comparison data to the spreadsheet
     */
    private function addDetailedComparison($sheet, $comparisonData, $startRow)
    {
        $row = $startRow;
        
        Log::info('Starting detailed comparison export at row ' . $row);
        
        // Section header
        $sheet->setCellValue('A' . $row, 'Detailed Comparison');
        $sheet->mergeCells('A' . $row . ':P' . $row);
        $sheet->getStyle('A' . $row)->getFont()->setBold(true)->setSize(14);
        $row += 2;
        
        // Headers for the comparison table
        $headers = [
            'A' => 'Cost Center',
            'B' => 'Description',
            'C' => 'Billing Total',
            'D' => 'File 1 Value',
            'E' => 'File 2 Value',
            'F' => 'Difference',
            'G' => '% Change',
            'H' => 'Status'
        ];
        
        foreach ($headers as $col => $header) {
            $sheet->setCellValue($col . $row, $header);
            $sheet->getStyle($col . $row)->getFont()->setBold(true);
            $sheet->getStyle($col . $row)->getFill()
                ->setFillType(Fill::FILL_SOLID)
                ->getStartColor()->setRGB('EFEFEF');
        }
        $row++;
        
        // Add the legend for zero differences
        $sheet->setCellValue('A18', 'No change:');
        $sheet->setCellValue('C18', 'Value in File 2 is the same as File 1 (zero difference)');
        $sheet->getStyle('C18')->getFill()
            ->setFillType(Fill::FILL_SOLID)
            ->getStartColor()->setRGB('C0C0C0'); // Silver color for zero differences
        
        // Cost center comparison
        foreach ($comparisonData['cost_centers'] as $ccComparison) {
            $code = $ccComparison['code'];
            $existsInFile1 = $ccComparison['exists_in_file1'];
            $existsInFile2 = $ccComparison['exists_in_file2'];
            
            // Handle missing cost centers
            if (!$existsInFile1 || !$existsInFile2) {
                $sheet->setCellValue('A' . $row, $code);
                $sheet->setCellValue('B' . $row, $existsInFile1 ? 'Missing in File 2' : 'Missing in File 1');
                $sheet->setCellValue('H' . $row, $existsInFile1 ? 'In File 1 Only' : 'In File 2 Only');
                
                // Set background color
                $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('FFF9C4'); // Light yellow
                
                $row++;
                continue;
            }
            
            // Add cost center total differences if they exist
            if (isset($ccComparison['cost_center_total']) && $ccComparison['cost_center_total']['has_differences']) {
                // Add a header for cost center total
                $sheet->setCellValue('A' . $row, $code);
                $sheet->setCellValue('B' . $row, 'Cost Center Total Differences');
                $sheet->getStyle('A' . $row . ':B' . $row)->getFont()->setBold(true);
                
                // Set background color for the header
                $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('D4D4D4'); // Light gray
                
                $row++;
                
                // Process all differences for cost center totals, including zero differences
                foreach ($ccComparison['cost_center_total']['differences'] as $diff) {
                    $sheet->setCellValue('A' . $row, $code);
                    $sheet->setCellValue('B' . $row, 'Total - ' . $diff['display_name']);
                    $sheet->setCellValue('C' . $row, $diff['display_name']);
                    $sheet->setCellValue('D' . $row, $diff['file1_value']);
                    $sheet->setCellValue('E' . $row, $diff['file2_value']);
                    $sheet->setCellValue('F' . $row, $diff['difference']);
                    
                    // Format percentage
                    if (!is_null($diff['percentage_change'])) {
                        $sheet->setCellValue('G' . $row, $diff['percentage_change'] . '%');
                    }
                    
                    // Status cell
                    if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                        $sheet->setCellValueExplicit('F' . $row, '0.00', \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                        $sheet->setCellValue('H' . $row, 'No Change');
                        // Apply silver background for cells with no change
                        $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                            ->setFillType(Fill::FILL_SOLID)
                            ->getStartColor()->setRGB('C0C0C0'); // Silver color
                    } else if ($diff['difference'] > 0) {
                        $sheet->setCellValue('H' . $row, 'Increase');
                        $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('27AE60');
                        $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                            ->setFillType(Fill::FILL_SOLID)
                            ->getStartColor()->setRGB('D5F5E3');
                    } else {
                        $sheet->setCellValue('H' . $row, 'Decrease');
                        $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('E74C3C');
                        $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                            ->setFillType(Fill::FILL_SOLID)
                            ->getStartColor()->setRGB('FADBD8');
                    }
                    
                    // Format currency cells
                    $moneyFormat = '_-"$"* #,##0.00_-;-"$"* #,##0.00_-;_-"$"* "-"??_-;_-@_-';
                    $sheet->getStyle('D' . $row . ':F' . $row)->getNumberFormat()->setFormatCode($moneyFormat);
                    
                    $row++;
                }
                
                // Add a spacer row
                $row++;
            }
            
            // Process main descriptions for matched cost centers
            foreach ($ccComparison['main_descriptions'] as $mdComparison) {
                $name = $mdComparison['name'];
                
                // Only process if both exist
                if ($mdComparison['exists_in_file1'] && $mdComparison['exists_in_file2']) {
                    // Process all differences, including those with zero difference
                    foreach ($mdComparison['differences'] as $diff) {
                        $sheet->setCellValue('A' . $row, $code);
                        $sheet->setCellValue('B' . $row, $name . ' - ' . $diff['display_name']);
                        $sheet->setCellValue('C' . $row, $diff['display_name']);
                        $sheet->setCellValue('D' . $row, $diff['file1_value']);
                        $sheet->setCellValue('E' . $row, $diff['file2_value']);
                        $sheet->setCellValue('F' . $row, $diff['difference']);
                        
                        // Format percentage
                        if (!is_null($diff['percentage_change'])) {
                            $sheet->setCellValue('G' . $row, $diff['percentage_change'] . '%');
                        }
                        
                        // Status cell
                        if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                            $sheet->setCellValueExplicit('H' . $row, 'No Change', \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                            // Apply silver background for cells with no change
                            $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB('C0C0C0'); // Silver color
                        } else if ($diff['difference'] > 0) {
                            $sheet->setCellValue('H' . $row, 'Increase');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('27AE60');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB('D5F5E3');
                        } else {
                            $sheet->setCellValue('H' . $row, 'Decrease');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('E74C3C');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB('FADBD8');
                        }
                        
                        // Format currency cells
                        $moneyFormat = '_-"$"* #,##0.00_-;-"$"* #,##0.00_-;_-"$"* "-"??_-;_-@_-';
                        $sheet->getStyle('D' . $row . ':F' . $row)->getNumberFormat()->setFormatCode($moneyFormat);
                        
                        $row++;
                    }
                }
            }
        }
        
        // Overall totals comparison
        if (!empty($comparisonData['overall_totals'])) {
            // Section header
            $row += 2;
            $sheet->setCellValue('A' . $row, 'Overall Totals Comparison');
            $sheet->mergeCells('A' . $row . ':H' . $row);
            $sheet->getStyle('A' . $row)->getFont()->setBold(true)->setSize(12);
            $row++;
            
            // Headers
            foreach ($headers as $col => $header) {
                $sheet->setCellValue($col . $row, $header);
                $sheet->getStyle($col . $row)->getFont()->setBold(true);
                $sheet->getStyle($col . $row)->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('EFEFEF');
            }
            $row++;
            
            foreach ($comparisonData['overall_totals'] as $mdComparison) {
                $name = $mdComparison['name'];
                
                // Only process if both exist
                if ($mdComparison['exists_in_file1'] && $mdComparison['exists_in_file2']) {
                    // Process all differences, including those with zero difference
                    foreach ($mdComparison['differences'] as $diff) {
                        $sheet->setCellValue('A' . $row, 'Overall');
                        $sheet->setCellValue('B' . $row, $name . ' - ' . $diff['display_name']);
                        $sheet->setCellValue('C' . $row, $diff['display_name']);
                        $sheet->setCellValue('D' . $row, $diff['file1_value']);
                        $sheet->setCellValue('E' . $row, $diff['file2_value']);
                        $sheet->setCellValue('F' . $row, $diff['difference']);
                                
                        // Format percentage
                        if (!is_null($diff['percentage_change'])) {
                            $sheet->setCellValue('G' . $row, $diff['percentage_change'] . '%');
                        }
                        
                        // Status cell
                        if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                            $sheet->setCellValueExplicit('H' . $row, 'No Change', \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                            // Apply silver background for cells with no change
                            $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB('C0C0C0'); // Silver color
                        } else if ($diff['difference'] > 0) {
                                    $sheet->setCellValue('H' . $row, 'Increase');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('27AE60');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB('D5F5E3');
                                } else {
                                    $sheet->setCellValue('H' . $row, 'Decrease');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('E74C3C');
                            $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                                    ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB('FADBD8');
                        }
                        
                        // Format currency cells
                        $moneyFormat = '_-"$"* #,##0.00_-;-"$"* #,##0.00_-;_-"$"* "-"??_-;_-@_-';
                        $sheet->getStyle('D' . $row . ':F' . $row)->getNumberFormat()->setFormatCode($moneyFormat);
                                
                                $row++;
                            }
                }
            }
        }
        
        // Report totals
        if ($comparisonData['report_totals']['exists_in_file1'] && $comparisonData['report_totals']['exists_in_file2']) {
            // Section header
        $row += 2;
            $sheet->setCellValue('A' . $row, 'Report Totals Comparison');
            $sheet->mergeCells('A' . $row . ':H' . $row);
            $sheet->getStyle('A' . $row)->getFont()->setBold(true)->setSize(12);
            $row++;
        
            // Headers
        foreach ($headers as $col => $header) {
            $sheet->setCellValue($col . $row, $header);
            $sheet->getStyle($col . $row)->getFont()->setBold(true);
            $sheet->getStyle($col . $row)->getFill()
                ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('EFEFEF');
        }
                    $row++;
        
            // Process all differences, including those with zero difference
            foreach ($comparisonData['report_totals']['differences'] as $diff) {
                $sheet->setCellValue('A' . $row, 'Report');
                $sheet->setCellValue('B' . $row, 'Cost Center Report Totals - ' . $diff['display_name']);
                $sheet->setCellValue('C' . $row, $diff['display_name']);
                $sheet->setCellValue('D' . $row, $diff['file1_value']);
                $sheet->setCellValue('E' . $row, $diff['file2_value']);
                $sheet->setCellValue('F' . $row, $diff['difference']);
                
                // Format percentage
                if (!is_null($diff['percentage_change'])) {
                    $sheet->setCellValue('G' . $row, $diff['percentage_change'] . '%');
                }
                
                // Status cell
                if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                    $sheet->setCellValueExplicit('H' . $row, 'No Change', \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                    // Apply silver background for cells with no change
                    $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                        ->setFillType(Fill::FILL_SOLID)
                        ->getStartColor()->setRGB('C0C0C0'); // Silver color
                } else if ($diff['difference'] > 0) {
                    $sheet->setCellValue('H' . $row, 'Increase');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('27AE60');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                        ->setFillType(Fill::FILL_SOLID)
                        ->getStartColor()->setRGB('D5F5E3');
                } else {
                    $sheet->setCellValue('H' . $row, 'Decrease');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('E74C3C');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                        ->setFillType(Fill::FILL_SOLID)
                        ->getStartColor()->setRGB('FADBD8');
                }
                
                // Format currency cells
                $moneyFormat = '_-"$"* #,##0.00_-;-"$"* #,##0.00_-;_-"$"* "-"??_-;_-@_-';
                $sheet->getStyle('D' . $row . ':F' . $row)->getNumberFormat()->setFormatCode($moneyFormat);
                
                $row++;
            }
        }
        
        // Age balance comparison
        if ($comparisonData['age_balance']['exists_in_file1'] && $comparisonData['age_balance']['exists_in_file2']) {
            // Section header
            $row += 2;
            $sheet->setCellValue('A' . $row, 'Age Balance % Comparison');
            $sheet->mergeCells('A' . $row . ':H' . $row);
            $sheet->getStyle('A' . $row)->getFont()->setBold(true)->setSize(12);
            $row++;
            
            // Headers
            foreach ($headers as $col => $header) {
                $sheet->setCellValue($col . $row, $header);
                $sheet->getStyle($col . $row)->getFont()->setBold(true);
                $sheet->getStyle($col . $row)->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('EFEFEF');
            }
            $row++;
            
            // Process all differences, including those with zero difference
            foreach ($comparisonData['age_balance']['differences'] as $diff) {
                $sheet->setCellValue('A' . $row, 'Balance');
                $sheet->setCellValue('B' . $row, 'Age Balance % - ' . $diff['display_name']);
                $sheet->setCellValue('C' . $row, $diff['display_name']);
                $sheet->setCellValue('D' . $row, $diff['file1_value']);
                $sheet->setCellValue('E' . $row, $diff['file2_value']);
                $sheet->setCellValue('F' . $row, $diff['difference']);
                
                // Format percentage
                if (!is_null($diff['percentage_change'])) {
                    $sheet->setCellValue('G' . $row, $diff['percentage_change'] . '%');
                }
                
                // Status cell
                if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                    $sheet->setCellValueExplicit('H' . $row, 'No Change', \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                    // Apply silver background for cells with no change
                    $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
                        ->setFillType(Fill::FILL_SOLID)
                        ->getStartColor()->setRGB('C0C0C0'); // Silver color
                } else if ($diff['difference'] > 0) {
                    $sheet->setCellValue('H' . $row, 'Increase');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('27AE60');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                        ->setFillType(Fill::FILL_SOLID)
                        ->getStartColor()->setRGB('D5F5E3');
                } else {
                    $sheet->setCellValue('H' . $row, 'Decrease');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFont()->getColor()->setRGB('E74C3C');
                    $sheet->getStyle('F' . $row . ':H' . $row)->getFill()
                        ->setFillType(Fill::FILL_SOLID)
                        ->getStartColor()->setRGB('FADBD8');
                }
                
                // Format currency cells
                $moneyFormat = '_-"$"* #,##0.00_-;-"$"* #,##0.00_-;_-"$"* "-"??_-;_-@_-';
                $sheet->getStyle('D' . $row . ':F' . $row)->getNumberFormat()->setFormatCode($moneyFormat);
                
                $row++;
            }
        }
        
        return $row;
    }
    
    /**
     * Apply global formatting to the spreadsheet
     */
    private function applyGlobalFormatting($sheet, $lastRow)
    {
        // Auto-size columns
        $columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
                   'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 
                   'AF', 'AG', 'AH', 'AI'];
        foreach ($columns as $col) {
            $sheet->getColumnDimension($col)->setAutoSize(true);
        }
        
        // Update freeze pane to use the new header row (row 5)
        $sheet->freezePane('A6');
    }

    /**
     * Export comparison data to an Excel file with original layout
     *
     * @param array $comparisonData The comparison data
     * @param ExcelJson $file1 The first file
     * @param ExcelJson $file2 The second file
     * @return string Path to the generated Excel file
     */
    public function exportOriginalFormat(array $comparisonData, ExcelJson $file1, ExcelJson $file2)
    {
        Log::info('Starting export in original format for comparison: ' . $comparisonData['comparison_name']);
        
        // Track cells that have already been processed to avoid duplicates
        $processedCells = [];
        
        // Create new Spreadsheet
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();
        $sheet->setTitle('Comparison');
        
        // Set up header information (rows 1-4) based on the image
        $sheet->setCellValue('A1', 'REPORT ID:');
        $sheet->setCellValue('B1', 'IWKREPAGEX Indah Water Konsortium SDN BHD');
        
        $sheet->setCellValue('A2', 'USER ID:');
        $sheet->setCellValue('B2', 'SYED');
        $sheet->setCellValue('C2', 'AGE BALANCES SIX MONTH AGEING BY COST CENTER, CUSTOMER TYPE & SERVICE LEVEL (TYPE 15) REPORT - WITH BALANCE > ZERO Including GST');
        $sheet->setCellValue('Q2', Carbon::now()->format('H:i:s d M Y'));
        
        $sheet->setCellValue('A3', 'PERIOD:');
        $sheet->setCellValue('B3', '');
        $sheet->setCellValue('C3', 'COMPARISON REPORT - Changes between BR and BS files');
        
        // Apply styling to header
        $sheet->getStyle('A1:A3')->getFont()->setBold(true);
        $sheet->getStyle('B1')->getFont()->setBold(true);
        $sheet->getStyle('B2:C3')->getFont()->setBold(true);
        $sheet->getStyle('Q2')->getFont()->setBold(true);
        $sheet->getStyle('B3')->getFont()->setBold(true);
        
        // Apply light yellow background color (#FFFFCC) to header rows 1-3
        $sheet->getStyle('A1:Q3')->getFill()
            ->setFillType(Fill::FILL_SOLID)
            ->getStartColor()->setRGB('FFFFCC');
        
        // Merge cells for the long title in row 2
        $sheet->mergeCells('C2:P2');
        
        // Set appropriate column widths
        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(20);
        
        // Adjust row heights
        $sheet->getRowDimension(1)->setRowHeight(20);
        $sheet->getRowDimension(2)->setRowHeight(20);
        $sheet->getRowDimension(3)->setRowHeight(20);
        $sheet->getRowDimension(4)->setRowHeight(15);
        
        // Set border for header rows
        $borderStyle = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['rgb' => '000000'],
                ],
            ],
        ];
        $sheet->getStyle('A1:Q3')->applyFromArray($borderStyle);
        
        // Add a descriptive header row to explain the changes
        $sheet->setCellValue('A4', 'Changes are displayed as value differences. Positive values (green) indicate increases, negative values (red) indicate decreases.');
        $sheet->mergeCells('A4:Q4');
        $sheet->getStyle('A4')->getFont()->setBold(true);
        $sheet->getStyle('A4')->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        
        // Apply lavender background color (#9999FF) to header rows 4-5
        $sheet->getStyle('A4:AI5')->getFill()
            ->setFillType(Fill::FILL_SOLID)
            ->getStartColor()->setRGB('9999FF');
        
        // Skip row 4 (descriptive) and start headers at row 5
        $headerRow = 5;
        
        // Set up headers in row 5
        $headers = [
            'A' => 'Description',
            'B' => 'Cost Center',
            'C' => 'Total > 0 Billing',
            'D' => 'Total > 0 Receipts',
            'E' => 'Total > 0 Crbal',
            'F' => 'No. Accts.',
            'G' => 'Outstanding Balance',
            'H' => 'No. Accts.',
            'I' => 'Current Balance',
            'J' => 'No. Accts.',
            'K' => 'Overdue > 1 Month',
            'L' => 'No. Accts.',
            'M' => 'Overdue > 2 Month',
            'N' => 'No. Accts.',
            'O' => 'Overdue > 3 Month',
            'P' => 'No. Accts.',
            'Q' => 'Overdue > 6 Month',
            'R' => 'No. Accts.',
            'S' => 'Overdue > 12 Month',
            'T' => 'No. Accts.',
            'U' => 'Overdue > 18 Month',
            'V' => 'No. Accts.',
            'W' => 'Overdue > 24 Month',
            'X' => 'No. Accts.',
            'Y' => 'Overdue > 30 Month',
            'Z' => 'No. Accts.',
            'AA' => 'Overdue > 36 Month',
            'AB' => 'No. Accts.',
            'AC' => 'Overdue > 42 Month',
            'AD' => 'No. Accts.',
            'AE' => 'Overdue > 48 Month',
            'AF' => 'No. Accts.',
            'AG' => 'Overdue > 54 Month',
            'AH' => 'No. Accts.',
            'AI' => 'Overdue > 60 Month'
        ];
        
        foreach ($headers as $col => $header) {
            $sheet->setCellValue($col . $headerRow, $header);
            $sheet->getStyle($col . $headerRow)->getFont()->setBold(true);
            // Header text color (ensure it's visible on lavender background)
            $sheet->getStyle($col . $headerRow)->getFont()->getColor()->setRGB('000000');
            $sheet->getStyle($col . $headerRow)->getBorders()->getAllBorders()
                ->setBorderStyle(Border::BORDER_THIN);
        }
        
        // Populate data starting from row 6 (instead of row 8)
        $row = 7;
        
        // Initialize array to store cost center total row numbers for highlighting
        $costCenterTotalRows = [];
        
        Log::info('Processing ' . count($comparisonData['cost_centers']) . ' cost centers for export in original format');
        
        // Process cost centers
        foreach ($comparisonData['cost_centers'] as $costCenter) {
            // Skip if not present in file2 (we're making a new version that looks like file2)
            if (!$costCenter['exists_in_file2']) {
                Log::info('Skipping cost center ' . $costCenter['code'] . ' - not in file 2');
                continue;
            }
            
            Log::info('Processing cost center: ' . $costCenter['code']);
            
            $cc2 = null;
            
            // Get the actual cost center data
            if ($costCenter['exists_in_file2']) {
                $costCenters2 = collect($file2->data['cost_centers']);
                $cc2 = $costCenters2->firstWhere('code', $costCenter['code']);
            }
            
            $cc1 = null;
            if ($costCenter['exists_in_file1']) {
                $costCenters1 = collect($file1->data['cost_centers']);
                $cc1 = $costCenters1->firstWhere('code', $costCenter['code']);
            }
            
            if (!$cc2) {
                Log::warning('Could not find cost center ' . $costCenter['code'] . ' in file 2 data');
                continue;
            }
            
            // Variables to accumulate totals for the cost center
            $costCenterTotals = [
                'billing_total' => 0,
                'receipts_total' => 0,
                'crbal_total' => 0,
                'no_accounts' => 0,
                'outstanding_balance' => 0,
                'current_no_accounts' => 0,
                'current_balance' => 0,
                'aging' => []
            ];
            
            Log::info('Cost center ' . $costCenter['code'] . ' has ' . count($cc2['main_descriptions'] ?? []) . ' main descriptions');
            
            foreach ($cc2['main_descriptions'] ?? [] as $mainDesc) {
                Log::info('  Processing main description: ' . $mainDesc['name']);
                
                // First write description types (Connected, Nil, IST)
                if (isset($mainDesc['description_types'])) {
                    Log::info('    Writing ' . count($mainDesc['description_types']) . ' description types (sub-rows)');
                    
                    foreach ($mainDesc['description_types'] as $descType) {
                        Log::info('      Writing sub-row: ' . $descType['type'] . ' at row ' . $row);
                        
                        $sheet->setCellValue('A' . $row, $descType['type']);
                        $sheet->setCellValue('B' . $row, $costCenter['code']);
                        $this->writeFinancialRow($sheet, $row, $descType['data'], null, false);
                        $row++;
                    }
                } else {
                    Log::info('    No description types (sub-rows) found for ' . $mainDesc['name']);
                }
                
                // Then write the main description heading (e.g., "CC1A01840 Commercial Totals")
                $mainDescLabel = 'CC' . $costCenter['code'] . ' ' . $mainDesc['name'];
                Log::info('    Writing main description total: ' . $mainDescLabel . ' at row ' . $row);
                
                $sheet->setCellValue('A' . $row, $mainDescLabel);
                $sheet->setCellValue('B' . $row, $costCenter['code']);
                $sheet->getStyle('A' . $row)->getFont()->setBold(true);
                
                // Add background color to total row
                $sheet->getStyle('A' . $row . ':AI' . $row)->getFill()
                    ->setFillType(Fill::FILL_SOLID)
                    ->getStartColor()->setRGB('00FFFF');
                
                // Write the main total data
                $this->writeFinancialRow($sheet, $row, $mainDesc['main_total'], null, false);
                
                // Accumulate totals for the cost center
                $costCenterTotals['billing_total'] += $mainDesc['main_total']['billing_total'] ?? 0;
                $costCenterTotals['receipts_total'] += $mainDesc['main_total']['receipts_total'] ?? 0;
                $costCenterTotals['crbal_total'] += $mainDesc['main_total']['crbal_total'] ?? 0;
                $costCenterTotals['no_accounts'] += $mainDesc['main_total']['no_accounts'] ?? 0;
                $costCenterTotals['outstanding_balance'] += $mainDesc['main_total']['outstanding_balance'] ?? 0;
                $costCenterTotals['current_no_accounts'] += $mainDesc['main_total']['current_no_accounts'] ?? 0;
                $costCenterTotals['current_balance'] += $mainDesc['main_total']['current_balance'] ?? 0;
                
                // Accumulate aging totals
                if (isset($mainDesc['main_total']['aging'])) {
                    foreach ($mainDesc['main_total']['aging'] as $period => $aging) {
                        if (!isset($costCenterTotals['aging'][$period])) {
                            $costCenterTotals['aging'][$period] = [
                                'no_accounts' => 0,
                                'balance' => 0
                            ];
                        }
                        $costCenterTotals['aging'][$period]['no_accounts'] += $aging['no_accounts'] ?? 0;
                        $costCenterTotals['aging'][$period]['balance'] += $aging['balance'] ?? 0;
                    }
                }
                
                
                // Add a blank row for spacing
                $row++;
            }
            
            // Add the cost center total row
            Log::info('  Writing cost center total for ' . $costCenter['code'] . ' at row ' . $row);
            
            $sheet->setCellValue('A' . $row, 'Cost Center ' . $costCenter['code'] . ' Totals');
            $sheet->setCellValue('B' . $row, $costCenter['code']);
            $sheet->getStyle('A' . $row)->getFont()->setBold(true);
            
            // Add background color to cost center total row (use light blue background)
            $sheet->getStyle('A' . $row . ':AI' . $row)->getFill()
                ->setFillType(Fill::FILL_SOLID)
                ->getStartColor()->setRGB('92CFFA');
            
            // Write the cost center total data
            $this->writeFinancialRow($sheet, $row, $costCenterTotals, null, false);
            
            // Store the row number for later highlighting
            $costCenterTotalRows[$costCenter['code']] = $row;
            
            // Check if we have explicit cost center total differences and log them
            if ($costCenter['exists_in_file1'] && isset($costCenter['cost_center_total']) && $costCenter['cost_center_total']['has_differences']) {
                Log::info('  Found explicit cost center total differences for ' . $costCenter['code']);
            }
            
            $row++;
            
            // Add a blank row between cost centers
            $row++;
        }
        
        Log::info('Starting to process differences for display in original format');
        
        // Now, find differences and display them with original and new values
        foreach ($comparisonData['cost_centers'] as $costCenter) {
            if (!$costCenter['exists_in_file1'] || !$costCenter['exists_in_file2']) {
                continue;
            }
            
            Log::info('Processing differences for cost center: ' . $costCenter['code']);
            
            // Process cost center total differences - process ALL differences including zero differences
            if (isset($costCenter['cost_center_total']) && isset($costCenterTotalRows[$costCenter['code']])) {
                $totalRowNumber = $costCenterTotalRows[$costCenter['code']];
                Log::info('  Processing cost center total row at ' . $totalRowNumber);
                
                // Process ALL differences including zero differences
                foreach ($costCenter['cost_center_total']['differences'] as $diff) {
                    $colIndex = $this->getColumnForField($diff['field']);
                    if ($colIndex) {
                        // Check if this cell has already been processed
                        $cellKey = $colIndex . $totalRowNumber;
                        if (!isset($processedCells[$cellKey])) {
                            if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                // Display 0.00 for identical values
                                Log::info('    Setting zero difference for ' . $diff['display_name'] . 
                                         ' at cell ' . $cellKey);
                                
                                // Display the zero value - use setCellValueExplicit to ensure text format
                                $sheet->setCellValueExplicit($colIndex . $totalRowNumber, "0.00", \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                                
                                // Apply silver background for identical values
                                $sheet->getStyle($colIndex . $totalRowNumber)->getFill()
                                    ->setFillType(Fill::FILL_SOLID)
                                    ->getStartColor()->setRGB('C0C0C0'); // Silver color
                                
                                // Apply alignment
                                $sheet->getStyle($colIndex . $totalRowNumber)->getAlignment()
                                    ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                
                                // Mark this cell as processed
                                $processedCells[$cellKey] = true;
                            } else {
                                // Only process actual differences (non-zero)
                                Log::info('    Adding difference for ' . $diff['display_name'] . 
                                         ' at cell ' . $cellKey . 
                                         ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                                
                                // Format the difference value - store unformatted value for accuracy
                                $rawDifference = $diff['difference'];
                                $difference = number_format($rawDifference, 2);
                                
                                // Add plus sign for positive differences
                                if (\$rawDifference < 0) {
                                    $displayValue = "+" . $difference;
                                } else {
                                    $displayValue = $difference;
                                }
                                
                                // Log the exact difference values being used
                                Log::info('    Raw difference value: ' . $rawDifference . 
                                         ', Formatted: ' . $difference . 
                                         ', Display value: ' . $displayValue);
                                
                                // Update cell with just the difference value - use setCellValueExplicit to ensure text format
                                $sheet->setCellValueExplicit($colIndex . $totalRowNumber, $displayValue, \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                                
                                // Apply background color based on increase or decrease
                                $sheet->getStyle($colIndex . $totalRowNumber)->getFill()
                                    ->setFillType(Fill::FILL_SOLID)
                                    ->getStartColor()->setRGB(\$rawDifference < 0 ? 'D5F5E3' : 'FADBD8');
                                
                                // Apply text color based on increase or decrease
                                $sheet->getStyle($colIndex . $totalRowNumber)->getFont()->getColor()
                                    ->setRGB(\$rawDifference < 0 ? '27AE60' : 'E74C3C');
                                    
                                // Apply alignment
                                $sheet->getStyle($colIndex . $totalRowNumber)->getAlignment()
                                    ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                    
                                // Add a note showing the original and new values for reference
                                $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                          " to " . number_format($diff['file2_value'], 2);
                                           
                                $sheet->getComment($colIndex . $totalRowNumber)
                                    ->getText()->createTextRun($diffText);
                                    
                                // Make sure the cell format is text for proper display
                                $sheet->getStyle($colIndex . $totalRowNumber)->getNumberFormat()
                                    ->setFormatCode('@');
                                
                                // Mark this cell as processed
                                $processedCells[$cellKey] = true;
                            }
                        }
                    }
                }
            }
            
            // Process differences in main descriptions
            foreach ($costCenter['main_descriptions'] as $mainDesc) {
                if (!$mainDesc['exists_in_file1'] || !$mainDesc['exists_in_file2']) {
                    continue;
                }
                
                Log::info('  Processing differences for main description: ' . $mainDesc['name']);
                
                // Process main description differences
                if (!empty($mainDesc['differences'])) {
                    // Find rows for this description by searching for 'CC[code] [name]'
                    $searchValue = 'CC' . $costCenter['code'] . ' ' . $mainDesc['name'];
                    
                    // Find the row number
                    $rowNumber = null;
                    for ($r = 6; $r <= (int)$row; $r++) {
                        if ($sheet->getCell('A' . $r)->getValue() === $searchValue) {
                            $rowNumber = $r;
                            break;
                        }
                    }
                    
                    if ($rowNumber) {
                        Log::info('    Found main description row at: ' . $rowNumber . ' for ' . $searchValue);
                        
                        // Process differences in the main totals
                        foreach ($mainDesc['differences'] as $diff) {
                            $colIndex = $this->getColumnForField($diff['field']);
                            if ($colIndex) {
                                // Check if this cell has already been processed to avoid multiple changes in one cell
                                $cellKey = $colIndex . $rowNumber;
                                if (!isset($processedCells[$cellKey])) {
                                    Log::info('      Adding difference for ' . $diff['display_name'] . 
                                             ' at cell ' . $cellKey . 
                                             ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                                    
                                    // Format the difference value - store unformatted value for accuracy
                                    $rawDifference = $diff['difference'];
                                    $difference = number_format($rawDifference, 2);
                                    
                                    // Add plus sign for positive differences
                                    if (\$rawDifference < 0) {
                                        $displayValue = "+" . $difference;
                                    } else {
                                        $displayValue = $difference;
                                    }
                                    
                                    // Update cell with just the difference value - use setCellValueExplicit to ensure text format
                                    $sheet->setCellValueExplicit($colIndex . $rowNumber, $displayValue, \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                                    
                                    // Apply background color based on increase or decrease
                                    $sheet->getStyle($colIndex . $rowNumber)->getFill()
                                        ->setFillType(Fill::FILL_SOLID)
                                        ->getStartColor()->setRGB(\$rawDifference < 0 ? 'D5F5E3' : 'FADBD8');
                                    
                                    // Apply text color based on increase or decrease
                                    $sheet->getStyle($colIndex . $rowNumber)->getFont()->getColor()
                                        ->setRGB(\$rawDifference < 0 ? '27AE60' : 'E74C3C');
                                        
                                    // Apply alignment
                                    $sheet->getStyle($colIndex . $rowNumber)->getAlignment()
                                        ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                        
                                    // Add a note showing the original and new values for reference
                                    $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                              " to " . number_format($diff['file2_value'], 2);
                                               
                                    $sheet->getComment($colIndex . $rowNumber)
                                        ->getText()->createTextRun($diffText);
                                        
                                    // Make sure the cell format is text for proper display
                                    $sheet->getStyle($colIndex . $rowNumber)->getNumberFormat()
                                        ->setFormatCode('@');
                                        
                                    // Mark this cell as processed
                                    $processedCells[$cellKey] = true;
                                } else {
                                    // Log this duplicate to help with debugging
                                    Log::warning("Duplicate difference found for cell {$cellKey}: {$diff['display_name']} in cost center {$costCenter['code']}");
                                }
                            }
                        }
                    } else {
                        Log::warning('    Could not find row for main description: ' . $searchValue);
                    }
                }
                
                // Check if there are any description_types_differences
                if (isset($mainDesc['description_types_differences'])) {
                    Log::info('    Processing ' . count($mainDesc['description_types_differences']) . ' description types with differences');
                    
                    // We need to find main description's row number if not already found
                    if (!isset($rowNumber) || !$rowNumber) {
                        // Find rows for this description by searching for 'CC[code] [name]'
                        $searchValue = 'CC' . $costCenter['code'] . ' ' . $mainDesc['name'];
                        
                        // Find the row number
                        for ($r = 6; $r <= (int)$row; $r++) {
                            if ($sheet->getCell('A' . $r)->getValue() === $searchValue) {
                                $rowNumber = $r;
                                break;
                            }
                        }
                    }
                    
                    if (!$rowNumber) {
                        Log::warning('    Could not find main description row for ' . $mainDesc['name'] . ' in cost center ' . $costCenter['code']);
                        continue;
                    }
                    
                    // Now find all related sub-rows for this main description
                    $relatedSubRows = [];
                    
                    // Search backward from the main description row to find related sub-rows
                    $r = $rowNumber - 1;
                    while ($r >= 6) {
                        $value = $sheet->getCell('A' . $r)->getValue();
                        $ccValue = $sheet->getCell('B' . $r)->getValue();
                        
                        // Stop if we hit another main description for this cost center
                        if (strpos($value, 'CC' . $costCenter['code']) === 0) {
                            break;
                        }
                        
                        // If this is a sub-row for our cost center, add it to our list
                        if (in_array($value, ['Connected', 'Nil', 'IST']) && $ccValue === $costCenter['code']) {
                            $relatedSubRows[$value] = $r;
                        }
                        
                        $r--;
                    }
                    
                    Log::info('    Found ' . count($relatedSubRows) . ' related sub-rows for ' . $mainDesc['name']);
                    
                    // Process differences in description types (Connected, Nil, IST)
                    foreach ($mainDesc['description_types_differences'] as $descType => $differences) {
                        Log::info('      Processing differences for sub-row: ' . $descType . ' (' . count($differences) . ' differences)');
                        
                        if (isset($relatedSubRows[$descType])) {
                            $descTypeRowNumber = $relatedSubRows[$descType];
                            Log::info('        Found sub-row at row: ' . $descTypeRowNumber);
                            
                            // Apply changes for each difference
                            foreach ($differences as $diff) {
                                $colIndex = $this->getColumnForField($diff['field']);
                                if ($colIndex) {
                                    // Check if this cell has already been processed to avoid multiple changes in one cell
                                    $cellKey = $colIndex . $descTypeRowNumber;
                                    if (!isset($processedCells[$cellKey])) {
                                        Log::info('          Adding difference for ' . $diff['display_name'] . 
                                                 ' at cell ' . $cellKey . 
                                                 ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                                        
                                        // Format the difference value - store unformatted value for accuracy
                                        $rawDifference = $diff['difference'];
                                        $difference = number_format($rawDifference, 2);
                                        
                                        // Add plus sign for positive differences
                                        if (\$rawDifference < 0) {
                                            $displayValue = "+" . $difference;
                                        } else {
                                            $displayValue = $difference;
                                        }
                                        
                                        // Update cell with just the difference value - use setCellValueExplicit to ensure text format
                                        $sheet->setCellValueExplicit($colIndex . $descTypeRowNumber, $displayValue, \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                                        
                                        // Apply background color based on increase, decrease or no change
                                        if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                            // Silver for zero differences
                                            $sheet->getStyle($colIndex . $descTypeRowNumber)->getFill()
                                                ->setFillType(Fill::FILL_SOLID)
                                                ->getStartColor()->setRGB('C0C0C0'); // Silver color
                                        } else {
                                            // Green or red for increases or decreases
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getFill()
                                            ->setFillType(Fill::FILL_SOLID)
                                            ->getStartColor()->setRGB($diff['difference'] > 0 ? 'D5F5E3' : 'FADBD8');
                                        }
                                        
                                        // Apply text color based on increase or decrease
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getFont()->getColor()
                                            ->setRGB($diff['difference'] > 0 ? '27AE60' : 'E74C3C');
                                            
                                        // Apply alignment
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getAlignment()
                                            ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                            
                                        // Add a note showing the original and new values for reference
                                        $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                                  " to " . number_format($diff['file2_value'], 2);
                                                   
                                        $sheet->getComment($colIndex . $descTypeRowNumber)
                                            ->getText()->createTextRun($diffText);
                                            
                                        // Make sure the cell format is text for proper display
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getNumberFormat()
                                            ->setFormatCode('@');
                                        
                                        // Mark this cell as processed
                                        $processedCells[$cellKey] = true;
                                    } else {
                                        // Log this duplicate to help with debugging
                                        Log::warning("Duplicate difference found for cell {$cellKey}: {$diff['display_name']} in cost center {$costCenter['code']} for description type {$descType}");
                                    }
                                }
                            }
                        } else {
                            Log::warning('        Could not find row for sub-row type: ' . $descType . ' in cost center ' . $costCenter['code']);
                        }
                    }
                } else {
                    Log::info('    No description_types_differences found for ' . $mainDesc['name']);
                }
            }
        }
        
        Log::info('Export in original format completed at row ' . $row);
        
        // Apply global formatting
        $columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
                   'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 
                   'AF', 'AG', 'AH', 'AI'];
                   
        // Add the overall totals section
        $row += 0; // Add some space
        
        Log::info('Processing overall totals section');
        
        // Process overall totals in the correct order with no duplicates
        $overallTotals = collect($file2->data['overall_totals'] ?? []);
        $mainDescOrder = [
            'Commercial Totals',
            'Domestic Totals',
            'Non-billable Totals',
            'Govt.Domestic Totals',
            'Govt. Premises Totals',
            'Govt. Quarters Totals',
            'Industrial Totals',
            'Ind. No HC Totals',
        ];
        
        // Track rows for later highlighting differences
        $overallRowMap = [];
        
        // Write each main description in the correct order
        foreach ($mainDescOrder as $mainDescName) {
            $mainDesc = $overallTotals->firstWhere('name', $mainDescName);
            if (!$mainDesc) {
                Log::info('  Skipping overall total: ' . $mainDescName . ' - not found in file 2');
                continue; // Skip if this one isn't present
            }
            
            Log::info('  Processing overall total: ' . $mainDescName);
            
            // Write description types (Connected, Nil, IST) in that order
            $desiredOrder = ['Connected', 'Nil', 'IST'];
            if (isset($mainDesc['description_types'])) {
                $descTypes = collect($mainDesc['description_types']);
                
                Log::info('    Writing ' . count($mainDesc['description_types']) . ' sub-rows');
                
                foreach ($desiredOrder as $typeName) {
                    $descType = $descTypes->firstWhere('type', $typeName);
                    if (!$descType) continue;
                    
                    Log::info('      Writing sub-row: ' . $typeName . ' at row ' . $row);
                    
                    $sheet->setCellValue('A' . $row, $descType['type']);
                    $sheet->setCellValue('B' . $row, ''); // Empty cost center for overall totals
                    $this->writeFinancialRow($sheet, $row, $descType['data'], null, false);
                    
                    // Store the row for later highlighting
                    $overallRowMap[$mainDescName . '_' . $typeName] = $row;
                    
                    $row++;
                }
            }
            
            // Write the main description heading
            Log::info('    Writing main total for ' . $mainDescName . ' at row ' . $row);
            
            $sheet->setCellValue('A' . $row, $mainDesc['name']);
            $sheet->setCellValue('B' . $row, ''); // Empty cost center for overall totals
            $sheet->getStyle('A' . $row)->getFont()->setBold(true);
            
            // Store the row for later highlighting
            $overallRowMap[$mainDescName] = $row;
            
            // Add background color to total row
            $sheet->getStyle('A' . $row . ':AI' . $row)->getFill()
                ->setFillType(Fill::FILL_SOLID)
                ->getStartColor()->setRGB('00FFFF'); // Cyan
            
            // Write the main total data
            $this->writeFinancialRow($sheet, $row, $mainDesc['main_total'], null, false);
            $row++;
        }
        
        // Add a blank row for spacing
        $row++;
        
        // Add Report Totals
        if (isset($file2->data['report_totals']) && !empty($file2->data['report_totals'])) {
            $reportTotals = $file2->data['report_totals'];
            
            Log::info('Adding Cost Center Report Totals at row ' . $row);
            
            $sheet->setCellValue('A' . $row, 'Cost Center Report Totals');
            $sheet->setCellValue('B' . $row, ''); // Empty cost center
            $sheet->getStyle('A' . $row)->getFont()->setBold(true);
            
            // Add background color
            $sheet->getStyle('A' . $row . ':AI' . $row)->getFill()
                ->setFillType(Fill::FILL_SOLID)
                ->getStartColor()->setRGB('92CFFA'); // Light blue
            
            // Write the report totals data
            $this->writeFinancialRow($sheet, $row, $reportTotals, null, false);
            
            // Store the row for later highlighting
            $overallRowMap['Cost Center Report Totals'] = $row;
            
            $row++;
        }
        
        // Add Age Balance %
        if (isset($file2->data['age_balance']) && !empty($file2->data['age_balance'])) {
            $ageBalance = $file2->data['age_balance'];
            
            Log::info('Adding Age Balance % at row ' . $row);
            
            $sheet->setCellValue('A' . $row, 'Age Balance %');
            $sheet->setCellValue('B' . $row, ''); // Empty cost center
            $sheet->getStyle('A' . $row)->getFont()->setBold(true);
            
            // Add background color
            $sheet->getStyle('A' . $row . ':AI' . $row)->getFill()
                ->setFillType(Fill::FILL_SOLID)
                ->getStartColor()->setRGB('92CFFA'); // Light blue
            
            // Write the age balance data
            $this->writeFinancialRow($sheet, $row, $ageBalance, null, false);
            
            // Store the row for later highlighting
            $overallRowMap['Age Balance %'] = $row;
            
            $row++;
        }
        
        Log::info('Processing overall differences');
        
        // Now process differences for overall totals using our stored row map
        foreach ($comparisonData['overall_totals'] as $mainDesc) {
            if (!$mainDesc['exists_in_file1'] || !$mainDesc['exists_in_file2'] || empty($mainDesc['differences'])) {
                continue;
            }
            
            Log::info('  Processing overall differences for: ' . $mainDesc['name']);
            
            // Look up the row for this main description
            $overallRowNumber = $overallRowMap[$mainDesc['name']] ?? null;
            
            if ($overallRowNumber) {
                Log::info('    Found overall total row at: ' . $overallRowNumber);
                
                // Process differences in the main totals
                foreach ($mainDesc['differences'] as $diff) {
                    $colIndex = $this->getColumnForField($diff['field']);
                    if ($colIndex) {
                        // Check if already processed
                        $cellKey = $colIndex . $overallRowNumber;
                        if (!isset($processedCells[$cellKey])) {
                            Log::info('      Adding difference for ' . $diff['display_name'] . 
                                     ' at cell ' . $cellKey . 
                                     ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                            
                            // Format the difference value
                            $difference = number_format($diff['difference'], 2);
                            
                            // Add plus sign for positive differences
                            if ($diff['difference'] > 0) {
                                $displayValue = "+" . $difference;
                            } else {
                                $displayValue = $difference;
                            }
                            
                            // Update cell with just the difference value
                            $sheet->setCellValue($colIndex . $overallRowNumber, $displayValue);
                            
                            // Apply background color based on increase, decrease or no change
                            if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                // Silver for zero differences
                                $sheet->getStyle($colIndex . $overallRowNumber)->getFill()
                                    ->setFillType(Fill::FILL_SOLID)
                                    ->getStartColor()->setRGB('C0C0C0'); // Silver color
                            } else {
                                // Green or red for increases or decreases
                            $sheet->getStyle($colIndex . $overallRowNumber)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB($diff['difference'] > 0 ? 'D5F5E3' : 'FADBD8');
                            }
                            
                            // Apply text color based on increase or decrease
                            $sheet->getStyle($colIndex . $overallRowNumber)->getFont()->getColor()
                                ->setRGB($diff['difference'] > 0 ? '27AE60' : 'E74C3C');
                                
                            // Apply alignment
                            $sheet->getStyle($colIndex . $overallRowNumber)->getAlignment()
                                ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                
                            // Add a note showing the original and new values for reference
                            $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                      " to " . number_format($diff['file2_value'], 2);
                                       
                            $sheet->getComment($colIndex . $overallRowNumber)
                                ->getText()->createTextRun($diffText);
                                
                            // Mark this cell as processed
                            $processedCells[$cellKey] = true;
                        }
                    }
                }
                
                // Process differences in description types (Connected, Nil, IST) for overall totals
                if (isset($mainDesc['description_types_differences'])) {
                    Log::info('    Processing ' . count($mainDesc['description_types_differences']) . ' sub-row differences');
                    
                    foreach ($mainDesc['description_types_differences'] as $descType => $differences) {
                        Log::info('      Processing sub-row differences for: ' . $descType);
                        
                        // Look up the row for this description type
                        $descTypeRowNumber = $overallRowMap[$mainDesc['name'] . '_' . $descType] ?? null;
                        
                        if ($descTypeRowNumber) {
                            Log::info('        Found sub-row at row: ' . $descTypeRowNumber);
                            
                            // Apply changes for each difference
                            foreach ($differences as $diff) {
                                $colIndex = $this->getColumnForField($diff['field']);
                                if ($colIndex) {
                                    // Check if this cell has already been processed to avoid multiple changes in one cell
                                    $cellKey = $colIndex . $descTypeRowNumber;
                                    if (!isset($processedCells[$cellKey])) {
                                        Log::info('          Adding difference for ' . $diff['display_name'] . 
                                                 ' at cell ' . $cellKey . 
                                                 ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                                        
                                        // Format the difference value - store unformatted value for accuracy
                                        $rawDifference = $diff['difference'];
                                        $difference = number_format($rawDifference, 2);
                                        
                                        // Add plus sign for positive differences
                                        if (\$rawDifference < 0) {
                                            $displayValue = "+" . $difference;
                                        } else {
                                            $displayValue = $difference;
                                        }
                                        
                                        // Update cell with just the difference value - use setCellValueExplicit to ensure text format
                                        $sheet->setCellValueExplicit($colIndex . $descTypeRowNumber, $displayValue, \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                                        
                                        // Apply background color based on increase, decrease or no change
                                        if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                            // Silver for zero differences
                                            $sheet->getStyle($colIndex . $descTypeRowNumber)->getFill()
                                                ->setFillType(Fill::FILL_SOLID)
                                                ->getStartColor()->setRGB('C0C0C0'); // Silver color
                                        } else {
                                            // Green or red for increases or decreases
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getFill()
                                            ->setFillType(Fill::FILL_SOLID)
                                            ->getStartColor()->setRGB($diff['difference'] > 0 ? 'D5F5E3' : 'FADBD8');
                                        }
                                        
                                        // Apply text color based on increase or decrease
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getFont()->getColor()
                                            ->setRGB($diff['difference'] > 0 ? '27AE60' : 'E74C3C');
                                            
                                        // Apply alignment
                                        $sheet->getStyle($colIndex . $descTypeRowNumber)->getAlignment()
                                            ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                            
                                        // Add a note showing the original and new values for reference
                                        $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                                  " to " . number_format($diff['file2_value'], 2);
                                                   
                                        $sheet->getComment($colIndex . $descTypeRowNumber)
                                            ->getText()->createTextRun($diffText);
                                            
                                        // Mark this cell as processed
                                        $processedCells[$cellKey] = true;
                                        
                                        // Also highlight the corresponding cell in the cost center total row if it exists
                                        if (isset($costCenterTotalRows[$costCenter['code']])) {
                                            $totalRowNumber = $costCenterTotalRows[$costCenter['code']];
                                            
                                            // Apply consistent styling to cost center total row
                                            // Use the same color scheme as the cell that changed
                                            if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                                // Silver for zero differences
                                                $sheet->getStyle($colIndex . $totalRowNumber)->getFill()
                                                    ->setFillType(Fill::FILL_SOLID)
                                                    ->getStartColor()->setRGB('C0C0C0'); // Silver color
                                                
                                                // Add zero difference display in the cell
                                                $sheet->setCellValue($colIndex . $totalRowNumber, "0.00");
                                                
                                                // Apply alignment
                                                $sheet->getStyle($colIndex . $totalRowNumber)->getAlignment()
                                                    ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                            } else {
                                                // Apply green/red highlighting for non-zero differences
                                            $sheet->getStyle($colIndex . $totalRowNumber)->getFill()
                                                ->setFillType(Fill::FILL_SOLID)
                                                ->getStartColor()->setRGB($diff['difference'] > 0 ? 'D5F5E3' : 'FADBD8');
                                                
                                                // Format the difference value
                                                $difference = number_format($diff['difference'], 2);
                                                
                                                // Add plus sign for positive differences
                                                if ($diff['difference'] > 0) {
                                                    $displayValue = "+" . $difference;
                                                } else {
                                                    $displayValue = $difference;
                                                }
                                                
                                                // Display the actual difference value
                                                $sheet->setCellValue($colIndex . $totalRowNumber, $displayValue);
                                                
                                                // Apply alignment
                                                $sheet->getStyle($colIndex . $totalRowNumber)->getAlignment()
                                                    ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                                
                                                // Apply text color based on increase or decrease
                                                $sheet->getStyle($colIndex . $totalRowNumber)->getFont()->getColor()
                                                    ->setRGB($diff['difference'] > 0 ? '27AE60' : 'E74C3C');
                                            }
                                        }
                                    } else {
                                        // Log this duplicate to help with debugging
                                        Log::warning("Duplicate difference found for cell {$cellKey}: {$diff['display_name']} in overall totals for description type {$descType}");
                                    }
                                }
                            }
                        } else {
                            Log::warning("Could not find row for description type {$descType} in overall totals for {$mainDesc['name']}");
                        }
                    }
                }
            } else {
                Log::warning("Could not find row for overall total {$mainDesc['name']}");
            }
        }
        
        // Process differences for report totals
        if ($comparisonData['report_totals']['exists_in_file1'] && 
            $comparisonData['report_totals']['exists_in_file2'] && 
            !empty($comparisonData['report_totals']['differences'])) {
            
            Log::info('Processing Cost Center Report Totals differences');
            
            // Get the row for report totals from our mapping
            $reportTotalsRowNumber = $overallRowMap['Cost Center Report Totals'] ?? null;
            
            if ($reportTotalsRowNumber) {
                Log::info('  Found Report Totals row at: ' . $reportTotalsRowNumber);
                
                // Process differences
                foreach ($comparisonData['report_totals']['differences'] as $diff) {
                    $colIndex = $this->getColumnForField($diff['field']);
                    if ($colIndex) {
                        // Check if already processed
                        $cellKey = $colIndex . $reportTotalsRowNumber;
                        if (!isset($processedCells[$cellKey])) {
                            Log::info('    Adding difference for ' . $diff['display_name'] . 
                                     ' at cell ' . $cellKey . 
                                     ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                            
                            // Format the difference value - store unformatted value for accuracy
                            $rawDifference = $diff['difference'];
                            $difference = number_format($rawDifference, 2);
                            
                            // Add plus sign for positive differences
                            if (\$rawDifference < 0) {
                                $displayValue = "+" . $difference;
                            } else {
                                $displayValue = $difference;
                            }
                            
                            // Update cell with just the difference value - use setCellValueExplicit to ensure text format
                            $sheet->setCellValueExplicit($colIndex . $reportTotalsRowNumber, $displayValue, \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                            
                            // Apply background color based on increase, decrease or no change
                            if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                // Silver for zero differences
                                $sheet->getStyle($colIndex . $reportTotalsRowNumber)->getFill()
                                    ->setFillType(Fill::FILL_SOLID)
                                    ->getStartColor()->setRGB('C0C0C0'); // Silver color
                            } else {
                                // Green or red for increases or decreases
                            $sheet->getStyle($colIndex . $reportTotalsRowNumber)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB(\$rawDifference < 0 ? 'D5F5E3' : 'FADBD8');
                            }
                            
                            // Apply text color based on increase or decrease
                            $sheet->getStyle($colIndex . $reportTotalsRowNumber)->getFont()->getColor()
                                ->setRGB(\$rawDifference < 0 ? '27AE60' : 'E74C3C');
                                
                            // Apply alignment
                            $sheet->getStyle($colIndex . $reportTotalsRowNumber)->getAlignment()
                                ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                
                            // Add a note showing the original and new values for reference
                            $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                      " to " . number_format($diff['file2_value'], 2);
                                       
                            $sheet->getComment($colIndex . $reportTotalsRowNumber)
                                ->getText()->createTextRun($diffText);
                                
                            // Make sure the cell format is text for proper display
                            $sheet->getStyle($colIndex . $reportTotalsRowNumber)->getNumberFormat()
                                ->setFormatCode('@');
                                
                            // Mark this cell as processed
                            $processedCells[$cellKey] = true;
                        }
                    }
                }
            } else {
                Log::warning("Could not find row for Cost Center Report Totals");
            }
        }
        
        // Process differences for age balance
        if ($comparisonData['age_balance']['exists_in_file1'] && 
            $comparisonData['age_balance']['exists_in_file2'] && 
            !empty($comparisonData['age_balance']['differences'])) {
            
            Log::info('Processing Age Balance differences');
            
            // Get the row for age balance from our mapping
            $ageBalanceRowNumber = $overallRowMap['Age Balance %'] ?? null;
            
            if ($ageBalanceRowNumber) {
                Log::info('  Found Age Balance row at: ' . $ageBalanceRowNumber);
                
                // Process differences
                foreach ($comparisonData['age_balance']['differences'] as $diff) {
                    $colIndex = $this->getColumnForField($diff['field']);
                    if ($colIndex) {
                        // Check if already processed
                        $cellKey = $colIndex . $ageBalanceRowNumber;
                        if (!isset($processedCells[$cellKey])) {
                            Log::info('    Adding difference for ' . $diff['display_name'] . 
                                     ' at cell ' . $cellKey . 
                                     ' (' . $diff['file1_value'] . ' → ' . $diff['file2_value'] . ')');
                            
                            // Format the difference value - store unformatted value for accuracy
                            $rawDifference = $diff['difference'];
                            $difference = number_format($rawDifference, 2);
                            
                            // Add plus sign for positive differences
                            if (\$rawDifference < 0) {
                                $displayValue = "+" . $difference;
                            } else {
                                $displayValue = $difference;
                            }
                            
                            // Update cell with just the difference value - use setCellValueExplicit to ensure text format
                            $sheet->setCellValueExplicit($colIndex . $ageBalanceRowNumber, $displayValue, \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING);
                            
                            // Apply background color based on increase, decrease or no change
                            if (isset($diff['is_zero_diff']) && $diff['is_zero_diff']) {
                                // Silver for zero differences
                                $sheet->getStyle($colIndex . $ageBalanceRowNumber)->getFill()
                                    ->setFillType(Fill::FILL_SOLID)
                                    ->getStartColor()->setRGB('C0C0C0'); // Silver color
                            } else {
                                // Green or red for increases or decreases
                            $sheet->getStyle($colIndex . $ageBalanceRowNumber)->getFill()
                                ->setFillType(Fill::FILL_SOLID)
                                ->getStartColor()->setRGB(\$rawDifference < 0 ? 'D5F5E3' : 'FADBD8');
                            }
                            
                            // Apply text color based on increase or decrease
                            $sheet->getStyle($colIndex . $ageBalanceRowNumber)->getFont()->getColor()
                                ->setRGB(\$rawDifference < 0 ? '27AE60' : 'E74C3C');
                                
                            // Apply alignment
                            $sheet->getStyle($colIndex . $ageBalanceRowNumber)->getAlignment()
                                ->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                                
                            // Add a note showing the original and new values for reference
                            $diffText = "Changed from " . number_format($diff['file1_value'], 2) . 
                                      " to " . number_format($diff['file2_value'], 2);
                                       
                            $sheet->getComment($colIndex . $ageBalanceRowNumber)
                                ->getText()->createTextRun($diffText);
                                
                            // Make sure the cell format is text for proper display
                            $sheet->getStyle($colIndex . $ageBalanceRowNumber)->getNumberFormat()
                                ->setFormatCode('@');
                                
                            // Mark this cell as processed
                            $processedCells[$cellKey] = true;
                        }
                    }
                }
            } else {
                Log::warning("Could not find row for Age Balance %");
            }
        }
        
        // Adjust column widths to accommodate the new format
        foreach ($columns as $col) {
            if (in_array($col, ['C', 'D', 'E', 'G', 'I', 'K', 'M', 'O', 'Q', 'S', 'U', 'W', 'Y', 'AA', 'AC', 'AE', 'AG', 'AI'])) {
                // Set a reasonable width for columns that will contain the difference values
                $sheet->getColumnDimension($col)->setWidth(15);
            } else {
                $sheet->getColumnDimension($col)->setAutoSize(true);
            }
        }
        
        $sheet->freezePane('A6');
        
        Log::info('Creating Excel file for export');
        
        // Create the Excel file
        $filename = $comparisonData['comparison_name'] . '_' . date('Y-m-d') . '.xlsx';
        $filepath = storage_path('app/public/exports/' . $filename);
        
        // Ensure the directory exists
        if (!file_exists(dirname($filepath))) {
            mkdir(dirname($filepath), 0755, true);
        }
        
        $writer = new Xlsx($spreadsheet);
        $writer->save($filepath);
        
        Log::info('Excel file saved to: ' . $filepath);
        
        return $filepath;
    }
    
    /**
     * Write financial data to a row in the spreadsheet
     */
    private function writeFinancialRow($sheet, $row, $data, $compareData = null, $highlight = true)
    {
        // Basic financial fields
        $fieldMap = [
            'billing_total' => 'C',
            'receipts_total' => 'D',
            'crbal_total' => 'E',
            'no_accounts' => 'F',
            'outstanding_balance' => 'G',
            'current_no_accounts' => 'H',
            'current_balance' => 'I'
        ];
        
        foreach ($fieldMap as $field => $col) {
            $value = $data[$field] ?? 0;
            $sheet->setCellValue($col . $row, $value);
            $sheet->getStyle($col . $row)->getNumberFormat()
                ->setFormatCode(NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
        }
        
        // Aging data
        if (isset($data['aging'])) {
            $agingColumns = [
                'Overdue > 1 month' => ['J', 'K'],
                'Overdue > 2 month' => ['L', 'M'],
                'Overdue > 3 month' => ['N', 'O'],
                'Overdue > 6 month' => ['P', 'Q'],
                'Overdue > 12 month' => ['R', 'S'],
                'Overdue > 18 month' => ['T', 'U'],
                'Overdue > 24 month' => ['V', 'W'],
                'Overdue > 30 month' => ['X', 'Y'],
                'Overdue > 36 month' => ['Z', 'AA'],
                'Overdue > 42 month' => ['AB', 'AC'],
                'Overdue > 48 month' => ['AD', 'AE'],
                'Overdue > 54 month' => ['AF', 'AG'],
                'Overdue > 60 month' => ['AH', 'AI']
            ];
            
            foreach ($agingColumns as $period => $cols) {
                $accountsCol = $cols[0];
                $balanceCol = $cols[1];
                
                if (isset($data['aging'][$period])) {
                    $sheet->setCellValue($accountsCol . $row, $data['aging'][$period]['no_accounts'] ?? 0);
                    $sheet->setCellValue($balanceCol . $row, $data['aging'][$period]['balance'] ?? 0);
                    
                    // Format the balance as currency
                    $sheet->getStyle($balanceCol . $row)->getNumberFormat()
                        ->setFormatCode(NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED1);
                }
            }
        }
    }
    
    /**
     * Get the column letter for a field name
     */
    private function getColumnForField($field)
    {
        $fieldMap = [
            'billing_total' => 'C',
            'receipts_total' => 'D',
            'crbal_total' => 'E',
            'no_accounts' => 'F',
            'outstanding_balance' => 'G',
            'current_no_accounts' => 'H',
            'current_balance' => 'I'
        ];
        
        if (isset($fieldMap[$field])) {
            return $fieldMap[$field];
        }
        
        // Check if it's an aging field
        if (strpos($field, 'aging.') === 0) {
            $parts = explode('.', $field);
            if (count($parts) === 3) {
                $period = $parts[1];
                $type = $parts[2]; // no_accounts or balance
                
                $agingMap = [
                    'Overdue > 1 month' => ['no_accounts' => 'J', 'balance' => 'K'],
                    'Overdue > 2 month' => ['no_accounts' => 'L', 'balance' => 'M'],
                    'Overdue > 3 month' => ['no_accounts' => 'N', 'balance' => 'O'],
                    'Overdue > 6 month' => ['no_accounts' => 'P', 'balance' => 'Q'],
                    'Overdue > 12 month' => ['no_accounts' => 'R', 'balance' => 'S'],
                    'Overdue > 18 month' => ['no_accounts' => 'T', 'balance' => 'U'],
                    'Overdue > 24 month' => ['no_accounts' => 'V', 'balance' => 'W'],
                    'Overdue > 30 month' => ['no_accounts' => 'X', 'balance' => 'Y'],
                    'Overdue > 36 month' => ['no_accounts' => 'Z', 'balance' => 'AA'],
                    'Overdue > 42 month' => ['no_accounts' => 'AB', 'balance' => 'AC'],
                    'Overdue > 48 month' => ['no_accounts' => 'AD', 'balance' => 'AE'],
                    'Overdue > 54 month' => ['no_accounts' => 'AF', 'balance' => 'AG'],
                    'Overdue > 60 month' => ['no_accounts' => 'AH', 'balance' => 'AI']
                ];
                
                if (isset($agingMap[$period][$type])) {
                    return $agingMap[$period][$type];
                }
            }
        }
        
        return null;
    }
} 
